using System.IO.Compression;

#if false
// asepriteのバイナリから引っ張り出してきたCelChunkの予約ビットより下の部分
// これは16x16で1ピクセルあたり32bit（RGBA32)のデータ
byte[] byteArray = new byte[]
{
    0x10, 0x00, 0x10, 0x00, 0x78, 0x9C, 0x63, 0x60, 0x60, 0xF8, 0xCF, 0x40, 0x01, 0x06, 0x02, 0x06,
    0x4A, 0x30, 0xD0, 0x14, 0xCA, 0x20, 0xC3, 0x7F, 0x8A, 0x30, 0xA5, 0x06, 0x50, 0x12, 0x76, 0xA3,
    0x78, 0x14, 0x0F, 0x34, 0x06, 0x00, 0x97, 0xEA, 0x4E, 0xC0
};
#elif false
// これはGrayScale Color
byte[] byteArray = new byte[]
{
    0x10, 0x00, 0x10, 0x00, 0x78, 0x9C, 0x63, 0xF8, 0xCF, 0x80, 0x17, 0x12, 0x90, 0x66, 0xD8, 0xF6,
    0x1F, 0x3F, 0x14, 0x22, 0x00, 0xCD, 0x08, 0x40, 0x02, 0xD6, 0x8F, 0x42, 0x0A, 0x21, 0x00, 0x00,
    0x47, 0x0E, 0xF0
};
#elif false
// これはIndex Color
byte[] byteArray = new byte[]
{
    0x10, 0x00, 0x10, 0x00, 0x78, 0x9C, 0x63, 0x66, 0x46, 0x05, 0x0C, 0x68, 0x80, 0x09, 0x0D, 0xA0,
    0x29, 0x67, 0x66, 0x44, 0x03, 0xE8, 0xF2, 0x83, 0x1D, 0x00, 0x00, 0x32, 0x5F, 0x02, 0xA1
};
#else
// これもIndex Color（ただし、パレット数は500以上）
byte[] byteArray = new byte[]
{
    0x10, 0x00, 0x10, 0x00, 0x78, 0x9C, 0x63, 0x66, 0x46, 0x05, 0x0C, 0x68, 0x80, 0x09, 0x0D, 0xA0,
    0x29, 0x67, 0x66, 0x44, 0x03, 0xE8, 0xF2, 0x83, 0x1D, 0x00, 0x00, 0x32, 0x5F, 0x02, 0xA1
};
#endif

// DeflateStreamで解凍する
using var ms = new MemoryStream(byteArray);

// 先頭4Byteは縦横のピクセル数を表す
byte[] buffer = new byte[2];
ms.Read(buffer, 0, 2);
ushort width = BitConverter.ToUInt16(buffer, 0);
ms.Read(buffer, 0, 2);
ushort height = BitConverter.ToUInt16(buffer, 0);

Console.WriteLine($"Width: {width}, Height: {height}");

// 解凍する
using var ds = new ZLibStream(ms, CompressionMode.Decompress);
using var resultStream = new MemoryStream();
ds.CopyTo(resultStream);
byte[] result = resultStream.ToArray();

// 1ピクセルあたり8bit (1Byte), 16bit, 32bitの場合がある
// resultの長さを、width * heightで割ると、1ピクセルあたりのバイト数がわかる
int byteSizePerPixel = result.Length / (width * height);

// 実際に、byteSizePerPixelで、先頭4ピクセル分のデータを取り出す
var first4Pixels = result.Take(byteSizePerPixel * 4)
    .Select((v, i) => (v, i))
    .GroupBy(x => x.i / byteSizePerPixel)
    .Select(g => string.Join(" ", g.Select(x => $"{x.v:X}")));

Console.WriteLine($"Byte size per pixel: {byteSizePerPixel}bytes.\ne.g.\n{string.Join("\n", first4Pixels)}");